// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/changestream (interfaces: ChangeEvent)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination changestream_mock.go github.com/juju/juju/core/changestream ChangeEvent
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	changestream "github.com/juju/juju/core/changestream"
	gomock "go.uber.org/mock/gomock"
)

// MockChangeEvent is a mock of ChangeEvent interface.
type MockChangeEvent struct {
	ctrl     *gomock.Controller
	recorder *MockChangeEventMockRecorder
}

// MockChangeEventMockRecorder is the mock recorder for MockChangeEvent.
type MockChangeEventMockRecorder struct {
	mock *MockChangeEvent
}

// NewMockChangeEvent creates a new mock instance.
func NewMockChangeEvent(ctrl *gomock.Controller) *MockChangeEvent {
	mock := &MockChangeEvent{ctrl: ctrl}
	mock.recorder = &MockChangeEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeEvent) EXPECT() *MockChangeEventMockRecorder {
	return m.recorder
}

// Changed mocks base method.
func (m *MockChangeEvent) Changed() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changed")
	ret0, _ := ret[0].(string)
	return ret0
}

// Changed indicates an expected call of Changed.
func (mr *MockChangeEventMockRecorder) Changed() *MockChangeEventChangedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changed", reflect.TypeOf((*MockChangeEvent)(nil).Changed))
	return &MockChangeEventChangedCall{Call: call}
}

// MockChangeEventChangedCall wrap *gomock.Call
type MockChangeEventChangedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChangeEventChangedCall) Return(arg0 string) *MockChangeEventChangedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChangeEventChangedCall) Do(f func() string) *MockChangeEventChangedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChangeEventChangedCall) DoAndReturn(f func() string) *MockChangeEventChangedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Namespace mocks base method.
func (m *MockChangeEvent) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockChangeEventMockRecorder) Namespace() *MockChangeEventNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockChangeEvent)(nil).Namespace))
	return &MockChangeEventNamespaceCall{Call: call}
}

// MockChangeEventNamespaceCall wrap *gomock.Call
type MockChangeEventNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChangeEventNamespaceCall) Return(arg0 string) *MockChangeEventNamespaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChangeEventNamespaceCall) Do(f func() string) *MockChangeEventNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChangeEventNamespaceCall) DoAndReturn(f func() string) *MockChangeEventNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockChangeEvent) Type() changestream.ChangeType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(changestream.ChangeType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockChangeEventMockRecorder) Type() *MockChangeEventTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockChangeEvent)(nil).Type))
	return &MockChangeEventTypeCall{Call: call}
}

// MockChangeEventTypeCall wrap *gomock.Call
type MockChangeEventTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockChangeEventTypeCall) Return(arg0 changestream.ChangeType) *MockChangeEventTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockChangeEventTypeCall) Do(f func() changestream.ChangeType) *MockChangeEventTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockChangeEventTypeCall) DoAndReturn(f func() changestream.ChangeType) *MockChangeEventTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
