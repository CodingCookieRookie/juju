// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/model/service (interfaces: ModelDeleter,WatcherFactory,State)
//
// Generated by this command:
//
//	mockgen -typed -package modelworkermanager_test -destination model_service_mock_test.go github.com/juju/juju/domain/model/service ModelDeleter,WatcherFactory,State
//

// Package modelworkermanager_test is a generated GoMock package.
package modelworkermanager_test

import (
	context "context"
	reflect "reflect"

	cloud "github.com/juju/juju/cloud"
	changestream "github.com/juju/juju/core/changestream"
	credential "github.com/juju/juju/core/credential"
	model "github.com/juju/juju/core/model"
	user "github.com/juju/juju/core/user"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	model0 "github.com/juju/juju/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockModelDeleter is a mock of ModelDeleter interface.
type MockModelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockModelDeleterMockRecorder
}

// MockModelDeleterMockRecorder is the mock recorder for MockModelDeleter.
type MockModelDeleterMockRecorder struct {
	mock *MockModelDeleter
}

// NewMockModelDeleter creates a new mock instance.
func NewMockModelDeleter(ctrl *gomock.Controller) *MockModelDeleter {
	mock := &MockModelDeleter{ctrl: ctrl}
	mock.recorder = &MockModelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelDeleter) EXPECT() *MockModelDeleterMockRecorder {
	return m.recorder
}

// DeleteDB mocks base method.
func (m *MockModelDeleter) DeleteDB(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDB indicates an expected call of DeleteDB.
func (mr *MockModelDeleterMockRecorder) DeleteDB(arg0 any) *MockModelDeleterDeleteDBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDB", reflect.TypeOf((*MockModelDeleter)(nil).DeleteDB), arg0)
	return &MockModelDeleterDeleteDBCall{Call: call}
}

// MockModelDeleterDeleteDBCall wrap *gomock.Call
type MockModelDeleterDeleteDBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelDeleterDeleteDBCall) Return(arg0 error) *MockModelDeleterDeleteDBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelDeleterDeleteDBCall) Do(f func(string) error) *MockModelDeleterDeleteDBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelDeleterDeleteDBCall) DoAndReturn(f func(string) error) *MockModelDeleterDeleteDBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceMapperWatcher(arg0 string, arg1 changestream.ChangeType, arg2 eventsource.NamespaceQuery, arg3 eventsource.Mapper) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNamespaceMapperWatcher", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceMapperWatcher indicates an expected call of NewNamespaceMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceMapperWatcher(arg0, arg1, arg2, arg3 any) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceMapperWatcher), arg0, arg1, arg2, arg3)
	return &MockWatcherFactoryNewNamespaceMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Do(f func(string, changestream.ChangeType, eventsource.NamespaceQuery, eventsource.Mapper) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) DoAndReturn(f func(string, changestream.ChangeType, eventsource.NamespaceQuery, eventsource.Mapper) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockState) Activate(arg0 context.Context, arg1 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Activate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Activate indicates an expected call of Activate.
func (mr *MockStateMockRecorder) Activate(arg0, arg1 any) *MockStateActivateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockState)(nil).Activate), arg0, arg1)
	return &MockStateActivateCall{Call: call}
}

// MockStateActivateCall wrap *gomock.Call
type MockStateActivateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateActivateCall) Return(arg0 error) *MockStateActivateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateActivateCall) Do(f func(context.Context, model.UUID) error) *MockStateActivateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateActivateCall) DoAndReturn(f func(context.Context, model.UUID) error) *MockStateActivateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudSupportsAuthType mocks base method.
func (m *MockState) CloudSupportsAuthType(arg0 context.Context, arg1 string, arg2 cloud.AuthType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSupportsAuthType", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudSupportsAuthType indicates an expected call of CloudSupportsAuthType.
func (mr *MockStateMockRecorder) CloudSupportsAuthType(arg0, arg1, arg2 any) *MockStateCloudSupportsAuthTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSupportsAuthType", reflect.TypeOf((*MockState)(nil).CloudSupportsAuthType), arg0, arg1, arg2)
	return &MockStateCloudSupportsAuthTypeCall{Call: call}
}

// MockStateCloudSupportsAuthTypeCall wrap *gomock.Call
type MockStateCloudSupportsAuthTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCloudSupportsAuthTypeCall) Return(arg0 bool, arg1 error) *MockStateCloudSupportsAuthTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCloudSupportsAuthTypeCall) Do(f func(context.Context, string, cloud.AuthType) (bool, error)) *MockStateCloudSupportsAuthTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCloudSupportsAuthTypeCall) DoAndReturn(f func(context.Context, string, cloud.AuthType) (bool, error)) *MockStateCloudSupportsAuthTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CloudType mocks base method.
func (m *MockState) CloudType(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudType", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudType indicates an expected call of CloudType.
func (mr *MockStateMockRecorder) CloudType(arg0, arg1 any) *MockStateCloudTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudType", reflect.TypeOf((*MockState)(nil).CloudType), arg0, arg1)
	return &MockStateCloudTypeCall{Call: call}
}

// MockStateCloudTypeCall wrap *gomock.Call
type MockStateCloudTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCloudTypeCall) Return(arg0 string, arg1 error) *MockStateCloudTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCloudTypeCall) Do(f func(context.Context, string) (string, error)) *MockStateCloudTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCloudTypeCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockStateCloudTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockState) Create(arg0 context.Context, arg1 model.UUID, arg2 model.ModelType, arg3 model0.GlobalModelCreationArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStateMockRecorder) Create(arg0, arg1, arg2, arg3 any) *MockStateCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockState)(nil).Create), arg0, arg1, arg2, arg3)
	return &MockStateCreateCall{Call: call}
}

// MockStateCreateCall wrap *gomock.Call
type MockStateCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateCall) Return(arg0 error) *MockStateCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateCall) Do(f func(context.Context, model.UUID, model.ModelType, model0.GlobalModelCreationArgs) error) *MockStateCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateCall) DoAndReturn(f func(context.Context, model.UUID, model.ModelType, model0.GlobalModelCreationArgs) error) *MockStateCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockState) Delete(arg0 context.Context, arg1 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStateMockRecorder) Delete(arg0, arg1 any) *MockStateDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockState)(nil).Delete), arg0, arg1)
	return &MockStateDeleteCall{Call: call}
}

// MockStateDeleteCall wrap *gomock.Call
type MockStateDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteCall) Return(arg0 error) *MockStateDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteCall) Do(f func(context.Context, model.UUID) error) *MockStateDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteCall) DoAndReturn(f func(context.Context, model.UUID) error) *MockStateDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetActivatedModelUUIDs mocks base method.
func (m *MockState) GetActivatedModelUUIDs(arg0 context.Context, arg1 []model.UUID) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivatedModelUUIDs", arg0, arg1)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivatedModelUUIDs indicates an expected call of GetActivatedModelUUIDs.
func (mr *MockStateMockRecorder) GetActivatedModelUUIDs(arg0, arg1 any) *MockStateGetActivatedModelUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivatedModelUUIDs", reflect.TypeOf((*MockState)(nil).GetActivatedModelUUIDs), arg0, arg1)
	return &MockStateGetActivatedModelUUIDsCall{Call: call}
}

// MockStateGetActivatedModelUUIDsCall wrap *gomock.Call
type MockStateGetActivatedModelUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetActivatedModelUUIDsCall) Return(arg0 []model.UUID, arg1 error) *MockStateGetActivatedModelUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetActivatedModelUUIDsCall) Do(f func(context.Context, []model.UUID) ([]model.UUID, error)) *MockStateGetActivatedModelUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetActivatedModelUUIDsCall) DoAndReturn(f func(context.Context, []model.UUID) ([]model.UUID, error)) *MockStateGetActivatedModelUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllActivatedModelsUUIDQuery mocks base method.
func (m *MockState) GetAllActivatedModelsUUIDQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActivatedModelsUUIDQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAllActivatedModelsUUIDQuery indicates an expected call of GetAllActivatedModelsUUIDQuery.
func (mr *MockStateMockRecorder) GetAllActivatedModelsUUIDQuery() *MockStateGetAllActivatedModelsUUIDQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActivatedModelsUUIDQuery", reflect.TypeOf((*MockState)(nil).GetAllActivatedModelsUUIDQuery))
	return &MockStateGetAllActivatedModelsUUIDQueryCall{Call: call}
}

// MockStateGetAllActivatedModelsUUIDQueryCall wrap *gomock.Call
type MockStateGetAllActivatedModelsUUIDQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllActivatedModelsUUIDQueryCall) Return(arg0 string) *MockStateGetAllActivatedModelsUUIDQueryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllActivatedModelsUUIDQueryCall) Do(f func() string) *MockStateGetAllActivatedModelsUUIDQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllActivatedModelsUUIDQueryCall) DoAndReturn(f func() string) *MockStateGetAllActivatedModelsUUIDQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerModel mocks base method.
func (m *MockState) GetControllerModel(arg0 context.Context) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerModel", arg0)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerModel indicates an expected call of GetControllerModel.
func (mr *MockStateMockRecorder) GetControllerModel(arg0 any) *MockStateGetControllerModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerModel", reflect.TypeOf((*MockState)(nil).GetControllerModel), arg0)
	return &MockStateGetControllerModelCall{Call: call}
}

// MockStateGetControllerModelCall wrap *gomock.Call
type MockStateGetControllerModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetControllerModelCall) Return(arg0 model.Model, arg1 error) *MockStateGetControllerModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetControllerModelCall) Do(f func(context.Context) (model.Model, error)) *MockStateGetControllerModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetControllerModelCall) DoAndReturn(f func(context.Context) (model.Model, error)) *MockStateGetControllerModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetControllerModelUUID mocks base method.
func (m *MockState) GetControllerModelUUID(arg0 context.Context) (model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControllerModelUUID", arg0)
	ret0, _ := ret[0].(model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControllerModelUUID indicates an expected call of GetControllerModelUUID.
func (mr *MockStateMockRecorder) GetControllerModelUUID(arg0 any) *MockStateGetControllerModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControllerModelUUID", reflect.TypeOf((*MockState)(nil).GetControllerModelUUID), arg0)
	return &MockStateGetControllerModelUUIDCall{Call: call}
}

// MockStateGetControllerModelUUIDCall wrap *gomock.Call
type MockStateGetControllerModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetControllerModelUUIDCall) Return(arg0 model.UUID, arg1 error) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetControllerModelUUIDCall) Do(f func(context.Context) (model.UUID, error)) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetControllerModelUUIDCall) DoAndReturn(f func(context.Context) (model.UUID, error)) *MockStateGetControllerModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModel mocks base method.
func (m *MockState) GetModel(arg0 context.Context, arg1 model.UUID) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", arg0, arg1)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockStateMockRecorder) GetModel(arg0, arg1 any) *MockStateGetModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockState)(nil).GetModel), arg0, arg1)
	return &MockStateGetModelCall{Call: call}
}

// MockStateGetModelCall wrap *gomock.Call
type MockStateGetModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelCall) Return(arg0 model.Model, arg1 error) *MockStateGetModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelCall) Do(f func(context.Context, model.UUID) (model.Model, error)) *MockStateGetModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelCall) DoAndReturn(f func(context.Context, model.UUID) (model.Model, error)) *MockStateGetModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelByName mocks base method.
func (m *MockState) GetModelByName(arg0 context.Context, arg1 user.Name, arg2 string) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelByName indicates an expected call of GetModelByName.
func (mr *MockStateMockRecorder) GetModelByName(arg0, arg1, arg2 any) *MockStateGetModelByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelByName", reflect.TypeOf((*MockState)(nil).GetModelByName), arg0, arg1, arg2)
	return &MockStateGetModelByNameCall{Call: call}
}

// MockStateGetModelByNameCall wrap *gomock.Call
type MockStateGetModelByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelByNameCall) Return(arg0 model.Model, arg1 error) *MockStateGetModelByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelByNameCall) Do(f func(context.Context, user.Name, string) (model.Model, error)) *MockStateGetModelByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelByNameCall) DoAndReturn(f func(context.Context, user.Name, string) (model.Model, error)) *MockStateGetModelByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelCloudNameAndCredential mocks base method.
func (m *MockState) GetModelCloudNameAndCredential(arg0 context.Context, arg1 model.UUID) (string, credential.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCloudNameAndCredential", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(credential.Key)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelCloudNameAndCredential indicates an expected call of GetModelCloudNameAndCredential.
func (mr *MockStateMockRecorder) GetModelCloudNameAndCredential(arg0, arg1 any) *MockStateGetModelCloudNameAndCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCloudNameAndCredential", reflect.TypeOf((*MockState)(nil).GetModelCloudNameAndCredential), arg0, arg1)
	return &MockStateGetModelCloudNameAndCredentialCall{Call: call}
}

// MockStateGetModelCloudNameAndCredentialCall wrap *gomock.Call
type MockStateGetModelCloudNameAndCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelCloudNameAndCredentialCall) Return(arg0 string, arg1 credential.Key, arg2 error) *MockStateGetModelCloudNameAndCredentialCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelCloudNameAndCredentialCall) Do(f func(context.Context, model.UUID) (string, credential.Key, error)) *MockStateGetModelCloudNameAndCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelCloudNameAndCredentialCall) DoAndReturn(f func(context.Context, model.UUID) (string, credential.Key, error)) *MockStateGetModelCloudNameAndCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelType mocks base method.
func (m *MockState) GetModelType(arg0 context.Context, arg1 model.UUID) (model.ModelType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelType", arg0, arg1)
	ret0, _ := ret[0].(model.ModelType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelType indicates an expected call of GetModelType.
func (mr *MockStateMockRecorder) GetModelType(arg0, arg1 any) *MockStateGetModelTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelType", reflect.TypeOf((*MockState)(nil).GetModelType), arg0, arg1)
	return &MockStateGetModelTypeCall{Call: call}
}

// MockStateGetModelTypeCall wrap *gomock.Call
type MockStateGetModelTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelTypeCall) Return(arg0 model.ModelType, arg1 error) *MockStateGetModelTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelTypeCall) Do(f func(context.Context, model.UUID) (model.ModelType, error)) *MockStateGetModelTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelTypeCall) DoAndReturn(f func(context.Context, model.UUID) (model.ModelType, error)) *MockStateGetModelTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelUsers mocks base method.
func (m *MockState) GetModelUsers(arg0 context.Context, arg1 model.UUID) ([]model.ModelUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelUsers", arg0, arg1)
	ret0, _ := ret[0].([]model.ModelUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelUsers indicates an expected call of GetModelUsers.
func (mr *MockStateMockRecorder) GetModelUsers(arg0, arg1 any) *MockStateGetModelUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelUsers", reflect.TypeOf((*MockState)(nil).GetModelUsers), arg0, arg1)
	return &MockStateGetModelUsersCall{Call: call}
}

// MockStateGetModelUsersCall wrap *gomock.Call
type MockStateGetModelUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelUsersCall) Return(arg0 []model.ModelUserInfo, arg1 error) *MockStateGetModelUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelUsersCall) Do(f func(context.Context, model.UUID) ([]model.ModelUserInfo, error)) *MockStateGetModelUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelUsersCall) DoAndReturn(f func(context.Context, model.UUID) ([]model.ModelUserInfo, error)) *MockStateGetModelUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllModelSummaries mocks base method.
func (m *MockState) ListAllModelSummaries(arg0 context.Context) ([]model.ModelSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllModelSummaries", arg0)
	ret0, _ := ret[0].([]model.ModelSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllModelSummaries indicates an expected call of ListAllModelSummaries.
func (mr *MockStateMockRecorder) ListAllModelSummaries(arg0 any) *MockStateListAllModelSummariesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllModelSummaries", reflect.TypeOf((*MockState)(nil).ListAllModelSummaries), arg0)
	return &MockStateListAllModelSummariesCall{Call: call}
}

// MockStateListAllModelSummariesCall wrap *gomock.Call
type MockStateListAllModelSummariesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListAllModelSummariesCall) Return(arg0 []model.ModelSummary, arg1 error) *MockStateListAllModelSummariesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListAllModelSummariesCall) Do(f func(context.Context) ([]model.ModelSummary, error)) *MockStateListAllModelSummariesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListAllModelSummariesCall) DoAndReturn(f func(context.Context) ([]model.ModelSummary, error)) *MockStateListAllModelSummariesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllModels mocks base method.
func (m *MockState) ListAllModels(arg0 context.Context) ([]model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllModels", arg0)
	ret0, _ := ret[0].([]model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllModels indicates an expected call of ListAllModels.
func (mr *MockStateMockRecorder) ListAllModels(arg0 any) *MockStateListAllModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllModels", reflect.TypeOf((*MockState)(nil).ListAllModels), arg0)
	return &MockStateListAllModelsCall{Call: call}
}

// MockStateListAllModelsCall wrap *gomock.Call
type MockStateListAllModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListAllModelsCall) Return(arg0 []model.Model, arg1 error) *MockStateListAllModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListAllModelsCall) Do(f func(context.Context) ([]model.Model, error)) *MockStateListAllModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListAllModelsCall) DoAndReturn(f func(context.Context) ([]model.Model, error)) *MockStateListAllModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelIDs mocks base method.
func (m *MockState) ListModelIDs(arg0 context.Context) ([]model.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelIDs", arg0)
	ret0, _ := ret[0].([]model.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelIDs indicates an expected call of ListModelIDs.
func (mr *MockStateMockRecorder) ListModelIDs(arg0 any) *MockStateListModelIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelIDs", reflect.TypeOf((*MockState)(nil).ListModelIDs), arg0)
	return &MockStateListModelIDsCall{Call: call}
}

// MockStateListModelIDsCall wrap *gomock.Call
type MockStateListModelIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListModelIDsCall) Return(arg0 []model.UUID, arg1 error) *MockStateListModelIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListModelIDsCall) Do(f func(context.Context) ([]model.UUID, error)) *MockStateListModelIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListModelIDsCall) DoAndReturn(f func(context.Context) ([]model.UUID, error)) *MockStateListModelIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelSummariesForUser mocks base method.
func (m *MockState) ListModelSummariesForUser(arg0 context.Context, arg1 user.Name) ([]model.UserModelSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelSummariesForUser", arg0, arg1)
	ret0, _ := ret[0].([]model.UserModelSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelSummariesForUser indicates an expected call of ListModelSummariesForUser.
func (mr *MockStateMockRecorder) ListModelSummariesForUser(arg0, arg1 any) *MockStateListModelSummariesForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelSummariesForUser", reflect.TypeOf((*MockState)(nil).ListModelSummariesForUser), arg0, arg1)
	return &MockStateListModelSummariesForUserCall{Call: call}
}

// MockStateListModelSummariesForUserCall wrap *gomock.Call
type MockStateListModelSummariesForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListModelSummariesForUserCall) Return(arg0 []model.UserModelSummary, arg1 error) *MockStateListModelSummariesForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListModelSummariesForUserCall) Do(f func(context.Context, user.Name) ([]model.UserModelSummary, error)) *MockStateListModelSummariesForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListModelSummariesForUserCall) DoAndReturn(f func(context.Context, user.Name) ([]model.UserModelSummary, error)) *MockStateListModelSummariesForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListModelsForUser mocks base method.
func (m *MockState) ListModelsForUser(arg0 context.Context, arg1 user.UUID) ([]model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModelsForUser", arg0, arg1)
	ret0, _ := ret[0].([]model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModelsForUser indicates an expected call of ListModelsForUser.
func (mr *MockStateMockRecorder) ListModelsForUser(arg0, arg1 any) *MockStateListModelsForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModelsForUser", reflect.TypeOf((*MockState)(nil).ListModelsForUser), arg0, arg1)
	return &MockStateListModelsForUserCall{Call: call}
}

// MockStateListModelsForUserCall wrap *gomock.Call
type MockStateListModelsForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListModelsForUserCall) Return(arg0 []model.Model, arg1 error) *MockStateListModelsForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListModelsForUserCall) Do(f func(context.Context, user.UUID) ([]model.Model, error)) *MockStateListModelsForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListModelsForUserCall) DoAndReturn(f func(context.Context, user.UUID) ([]model.Model, error)) *MockStateListModelsForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateCredential mocks base method.
func (m *MockState) UpdateCredential(arg0 context.Context, arg1 model.UUID, arg2 credential.Key) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredential", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredential indicates an expected call of UpdateCredential.
func (mr *MockStateMockRecorder) UpdateCredential(arg0, arg1, arg2 any) *MockStateUpdateCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredential", reflect.TypeOf((*MockState)(nil).UpdateCredential), arg0, arg1, arg2)
	return &MockStateUpdateCredentialCall{Call: call}
}

// MockStateUpdateCredentialCall wrap *gomock.Call
type MockStateUpdateCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateCredentialCall) Return(arg0 error) *MockStateUpdateCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateCredentialCall) Do(f func(context.Context, model.UUID, credential.Key) error) *MockStateUpdateCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateCredentialCall) DoAndReturn(f func(context.Context, model.UUID, credential.Key) error) *MockStateUpdateCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
