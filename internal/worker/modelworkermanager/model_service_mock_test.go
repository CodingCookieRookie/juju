// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/services (interfaces: ModelService)
//
// Generated by this command:
//
//	mockgen -typed -package modelworkermanager_test -destination model_service_mock_test.go github.com/juju/juju/internal/services ModelService
//

// Package modelworkermanager_test is a generated GoMock package.
package modelworkermanager_test

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// Model mocks base method.
func (m *MockModelService) Model(arg0 context.Context, arg1 model.UUID) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", arg0, arg1)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model.
func (mr *MockModelServiceMockRecorder) Model(arg0, arg1 any) *MockModelServiceModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockModelService)(nil).Model), arg0, arg1)
	return &MockModelServiceModelCall{Call: call}
}

// MockModelServiceModelCall wrap *gomock.Call
type MockModelServiceModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceModelCall) Return(arg0 model.Model, arg1 error) *MockModelServiceModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceModelCall) Do(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceModelCall) DoAndReturn(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchActivatedModels mocks base method.
func (m *MockModelService) WatchActivatedModels(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchActivatedModels", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchActivatedModels indicates an expected call of WatchActivatedModels.
func (mr *MockModelServiceMockRecorder) WatchActivatedModels(arg0 any) *MockModelServiceWatchActivatedModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchActivatedModels", reflect.TypeOf((*MockModelService)(nil).WatchActivatedModels), arg0)
	return &MockModelServiceWatchActivatedModelsCall{Call: call}
}

// MockModelServiceWatchActivatedModelsCall wrap *gomock.Call
type MockModelServiceWatchActivatedModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceWatchActivatedModelsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockModelServiceWatchActivatedModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceWatchActivatedModelsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockModelServiceWatchActivatedModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceWatchActivatedModelsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockModelServiceWatchActivatedModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
