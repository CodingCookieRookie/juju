// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/modelworkermanager (interfaces: ControllerDomainServices)
//
// Generated by this command:
//
//	mockgen -typed -package modelworkermanager_test -destination controller_domain_services_mock_test.go github.com/juju/juju/internal/worker/modelworkermanager ControllerDomainServices
//

// Package modelworkermanager_test is a generated GoMock package.
package modelworkermanager_test

import (
	reflect "reflect"

	service "github.com/juju/juju/domain/model/service"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerDomainServices is a mock of ControllerDomainServices interface.
type MockControllerDomainServices struct {
	ctrl     *gomock.Controller
	recorder *MockControllerDomainServicesMockRecorder
}

// MockControllerDomainServicesMockRecorder is the mock recorder for MockControllerDomainServices.
type MockControllerDomainServicesMockRecorder struct {
	mock *MockControllerDomainServices
}

// NewMockControllerDomainServices creates a new mock instance.
func NewMockControllerDomainServices(ctrl *gomock.Controller) *MockControllerDomainServices {
	mock := &MockControllerDomainServices{ctrl: ctrl}
	mock.recorder = &MockControllerDomainServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerDomainServices) EXPECT() *MockControllerDomainServicesMockRecorder {
	return m.recorder
}

// Model mocks base method.
func (m *MockControllerDomainServices) Model() *service.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(*service.WatchableService)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockControllerDomainServicesMockRecorder) Model() *MockControllerDomainServicesModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockControllerDomainServices)(nil).Model))
	return &MockControllerDomainServicesModelCall{Call: call}
}

// MockControllerDomainServicesModelCall wrap *gomock.Call
type MockControllerDomainServicesModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerDomainServicesModelCall) Return(arg0 *service.WatchableService) *MockControllerDomainServicesModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerDomainServicesModelCall) Do(f func() *service.WatchableService) *MockControllerDomainServicesModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerDomainServicesModelCall) DoAndReturn(f func() *service.WatchableService) *MockControllerDomainServicesModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
